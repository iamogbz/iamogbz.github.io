{"version":3,"sources":["webpack:///./src/components/Image/index.js","webpack:///./src/components/Link/Link.styles.js","webpack:///./src/components/Link/index.js","webpack:///./src/containers/Home/Home.styles.js","webpack:///./src/containers/Home/index.js"],"names":["Image_Image","Image","_ref","name","size","type","react_default","a","createElement","src","concat","defaultProps","alt","width","propTypes","prop_types_default","string","isRequired","components_Image","getBorderColor","borderColor","getBorderWidth","_ref2","borderWidth","getButtonWidth","_ref3","buttonWidth","getButtonHeight","_ref4","buttonHeight","lineBorderPsuedoElem","props","AnimatedBorderedLinkWrapper","styled_components_browser_esm","span","_templateObject","_ref7","fontColors","initial","_ref5","active","_ref6","hover","Link_Link","href","children","linkProps","pick_default","borderStyleProps","Link","to","node","number","shape","components_Link","FullPageGrid","Object","styled_css_grid_esm","Home_styles_templateObject","CenteredCell","_templateObject2","__webpack_exports__","routed","routes","describe","columns","rows","height","labs","$"],"mappings":"qIAKMA,EAAQ,SAARC,EAAQC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,KAAMC,EAAfH,EAAeG,KAAf,OACVC,EAAAC,EAAAC,cAAA,OACIC,IAAG,IAAAC,OAJY,gBAIZ,KAAAA,OAAwBP,EAAxB,KAAAO,OAAgCL,GAAQJ,EAAMU,aAAaN,MAC9DO,IAAKT,EACLU,MAAOT,KAIfJ,EAAMc,WACFX,KAAMY,EAAAR,EAAUS,OAAOC,WACvBb,KAAMW,EAAAR,EAAUS,OAChBX,KAAMU,EAAAR,EAAUS,QAGpBhB,EAAMW,cACFP,KAAM,UACNC,KAAM,OAGV,IAAAa,EAAA,ooDCtBA,IACMC,EAAiB,SAAAjB,GAAA,IAAGkB,EAAHlB,EAAGkB,YAAH,SAAAV,OAAwBU,IACzCC,EAAiB,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAH,SAAAb,OAAwBa,EAAxB,OACjBC,EAAiB,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAH,SAAAhB,OAAwBgB,EAAxB,OACjBC,EAAkB,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,aAAH,SAAAnB,OAAyBmB,EAAzB,OAKlBC,EAAuB,SAAAC,GAAK,2EAAArB,OATjB,OASiB,sBAAAA,OAIrBc,EAAeO,GAJM,QAOrBC,EAA8BC,EAAA,EAAOC,KAAVC,IAQrBd,EACNG,EACCG,EAnBU,SAAAS,GAAA,OAAAA,EAAGC,WAAcC,SA2BdjB,EAIjBF,EACAA,EAvCO,cAKM,SAAAoB,GAAA,OAAAA,EAAGF,WAAcG,QAyCZrB,EAxCN,SAAAsB,GAAA,OAAAA,EAAGJ,WAAcK,OA6CPrB,EAMtBS,EAzDO,OA2DKN,EAAoBH,EACbA,EAAkBF,EACjBE,EAAkBF,EA7D/B,OAoECQ,EAKRG,EAEqBX,EACCA,EACdE,EA7ED,OAqFYG,GChF7B,SAASmB,EAAKZ,GAAO,IACTa,EAAmBb,EAAnBa,KAAMC,EAAad,EAAbc,SACRC,EAAYC,IAAKhB,GAAQ,WAAY,OAAQ,OAC7CiB,EAAmBD,IAAKhB,GAC1B,cACA,cACA,cACA,eACA,eAEJ,OACIzB,EAAAC,EAAAC,cAACwB,EAAgCgB,EAC5BJ,EAAOtC,EAAAC,EAAAC,cAAA,IAAOsC,EAAYD,GAAgBvC,EAAAC,EAAAC,cAACyC,EAAA,EAAMH,IAK9DH,EAAK7B,WAEDoC,GAAInC,EAAAR,EAAUS,OAEd4B,KAAM7B,EAAAR,EAAUS,OAEhB6B,SAAU9B,EAAAR,EAAU4C,KAAKlC,WAEzBG,YAAaL,EAAAR,EAAUS,OAEvBO,YAAaR,EAAAR,EAAU6C,OAEvB1B,YAAaX,EAAAR,EAAU6C,OAEvBvB,aAAcd,EAAAR,EAAU6C,OAExBf,WAAYtB,EAAAR,EAAU8C,OAClBb,OAAQzB,EAAAR,EAAUS,OAClB0B,MAAO3B,EAAAR,EAAUS,OACjBsB,QAASvB,EAAAR,EAAUS,UAI3B2B,EAAKhC,cACDuC,GAAI,KACJN,KAAM,KACNxB,YAAa,QACbG,YAAa,EACbG,YAAa,IACbG,aAAc,GACdQ,YACIG,OAAQ,QACRE,MAAO,UACPJ,QAAS,UAIjB,IAAAgB,EAAA,uaC1DO,IAAMC,EAAeC,OAAAvB,EAAA,EAAAuB,CAAOC,EAAA,EAAPD,CAAHE,KAKZC,EAAeH,OAAAvB,EAAA,EAAAuB,CAAOC,EAAA,EAAPD,CAAHI,KCDzBC,EAAA,mBACI,IAAMC,EAASC,EAAA,EAAUC,WACzB,OACI1D,EAAAC,EAAAC,cAAC+C,GAAaU,QAAS,EAAGC,KAAM,GAC5B5D,EAAAC,EAAAC,cAACmD,GAAa9C,MAAO,EAAGsD,OAAQ,GAC5B7D,EAAAC,EAAAC,cAACU,GAAMd,KAAK,MAAMD,KAAK,aAE3BG,EAAAC,EAAAC,cAACmD,EAAD,KACIrD,EAAAC,EAAAC,cAAC8C,GAAKV,KAAK,gDAAX,WAIJtC,EAAAC,EAAAC,cAACmD,EAAD,KACIrD,EAAAC,EAAAC,cAAC8C,GAAKJ,GAAIY,EAAOM,KAAKC,GAAtB,SAEJ/D,EAAAC,EAAAC,cAACmD,EAAD,KACIrD,EAAAC,EAAAC,cAAC8C,GAAKV,KAAK,8BAAX","file":"6.main.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst imageAssetPath = \"assets/images\";\n\nconst Image = ({ name, size, type }) => (\n    <img\n        src={`/${imageAssetPath}/${name}.${type || Image.defaultProps.type}`}\n        alt={name}\n        width={size}\n    />\n);\n\nImage.propTypes = {\n    name: PropTypes.string.isRequired,\n    size: PropTypes.string,\n    type: PropTypes.string,\n};\n\nImage.defaultProps = {\n    size: \"initial\",\n    type: \"png\",\n};\n\nexport default Image;\n","import styled from \"styled-components\";\n\nconst animTime = \"0.1s\";\nconst getBorderColor = ({ borderColor }) => `${borderColor}`;\nconst getBorderWidth = ({ borderWidth }) => `${borderWidth}px`;\nconst getButtonWidth = ({ buttonWidth }) => `${buttonWidth}px`;\nconst getButtonHeight = ({ buttonHeight }) => `${buttonHeight}px`;\nconst getActiveColor = ({ fontColors: { active } }) => active;\nconst getHoverColor = ({ fontColors: { hover } }) => hover;\nconst getInitialColor = ({ fontColors: { initial } }) => initial;\n\nconst lineBorderPsuedoElem = props => `\n    content: \"\";\n    position: absolute;\n    transition: ease ${animTime} all;\n    width: ${getButtonWidth(props)};\n`;\n\nexport const AnimatedBorderedLinkWrapper = styled.span`\na {\n    text-transform: uppercase;\n    text-decoration: none;\n\n    justify-content: center;\n    align-items: center;\n    display: inline-flex;\n    margin: calc(${getBorderWidth} * 2);\n    width: ${getButtonWidth};\n    height: ${getButtonHeight};\n    font-weight: bold;\n    color: ${getInitialColor};\n    margin: 0;\n    padding: 0;\n    position: relative;\n\n    background-repeat: no-repeat;\n    background-size: 50% ${getBorderWidth};\n    background-position: bottom;\n    background-image: linear-gradient(\n        90deg,\n        ${getBorderColor} 0%,\n        ${getBorderColor} 100%\n    );\n    transition: ${animTime} all ease;\n    transition-delay: calc(${animTime} * 2);\n    \n    &:active {\n        color: ${getActiveColor};\n        background-color: ${getBorderColor};\n    }\n\n    &:hover {\n        color: ${getHoverColor};\n        background-size: 100% ${getBorderWidth};\n        transition-delay: 0s;\n    }\n\n    /* side borders */\n    &::before {\n        ${lineBorderPsuedoElem}\n        transition-delay: ${animTime};\n        width: calc(${getButtonWidth} - ${getBorderWidth} * 2);\n        border-left: solid ${getBorderWidth} ${getBorderColor};\n        border-right: solid ${getBorderWidth} ${getBorderColor};\n        height: 0;\n        bottom: 0;\n    }\n\n    &:hover::before {\n        transition-delay: ${animTime};\n        height: ${getButtonHeight};\n    }\n\n    /* top border */\n    &::after {\n        ${lineBorderPsuedoElem}\n        transition-delay: 0s;\n        border-left: solid 0 ${getBorderColor};\n        border-right: solid 0 ${getBorderColor};\n        height: ${getBorderWidth};\n        top: 0;\n        left: 0;\n    }\n\n    &:hover::after {\n        transition-delay: calc(${animTime} * 2);\n        width: 0;\n        border-width: calc(${getButtonWidth} / 2);\n    }\n}\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link as L } from \"react-router-dom\";\nimport pick from \"lodash/pick\";\n\nimport { AnimatedBorderedLinkWrapper } from \"./Link.styles\";\n\nfunction Link(props) {\n    const { href, children } = props;\n    const linkProps = pick(props, [\"children\", \"href\", \"to\"]);\n    const borderStyleProps = pick(props, [\n        \"borderColor\",\n        \"borderWidth\",\n        \"buttonWidth\",\n        \"buttonHeight\",\n        \"fontColors\",\n    ]);\n    return (\n        <AnimatedBorderedLinkWrapper {...borderStyleProps}>\n            {href ? <a {...linkProps}>{children}</a> : <L {...linkProps} />}\n        </AnimatedBorderedLinkWrapper>\n    );\n}\n\nLink.propTypes = {\n    /** If specified react router Link is user */\n    to: PropTypes.string,\n    /** If specified native html a link is used */\n    href: PropTypes.string,\n    /** HTML element content */\n    children: PropTypes.node.isRequired,\n    /** CSS border color */\n    borderColor: PropTypes.string,\n    /** CSS border thickness */\n    borderWidth: PropTypes.number,\n    /** Link button width in px */\n    buttonWidth: PropTypes.number,\n    /** Link button height in px */\n    buttonHeight: PropTypes.number,\n    /** Link colors in various contexts */\n    fontColors: PropTypes.shape({\n        active: PropTypes.string,\n        hover: PropTypes.string,\n        initial: PropTypes.string,\n    }),\n};\n\nLink.defaultProps = {\n    to: null,\n    href: null,\n    borderColor: \"black\",\n    borderWidth: 8,\n    buttonWidth: 128,\n    buttonHeight: 64,\n    fontColors: {\n        active: \"white\",\n        hover: \"#2386F1\",\n        initial: \"black\",\n    },\n};\n\nexport default Link;\n","import styled from \"styled-components\";\nimport { Grid, Cell } from \"styled-css-grid\";\n\nexport const FullPageGrid = styled(Grid)`\n    height: 100vh;\n    width: 100vw;\n`;\n\nexport const CenteredCell = styled(Cell)`\n    display: flex;\n    text-align: center;\n    align-items: center;\n    justify-content: center;\n    justify-self: stretch;\n`;\n","import React from \"react\";\n\nimport Image from \"components/Image\";\nimport Link from \"components/Link\";\nimport appRoutes from \"containers/App/routes\";\nimport { FullPageGrid, CenteredCell } from \"./Home.styles\";\n\nexport default function() {\n    const routed = appRoutes.describe();\n    return (\n        <FullPageGrid columns={3} rows={3}>\n            <CenteredCell width={3} height={2}>\n                <Image size=\"256\" name=\"favicon\" />\n            </CenteredCell>\n            <CenteredCell>\n                <Link href=\"https://github.com/iamogbz/iamogbz.github.io\">\n                    Source\n                </Link>\n            </CenteredCell>\n            <CenteredCell>\n                <Link to={routed.labs.$}>Labs</Link>\n            </CenteredCell>\n            <CenteredCell>\n                <Link href=\"http://emmanuel.ogbizi.com\">Profile</Link>\n            </CenteredCell>\n        </FullPageGrid>\n    );\n}\n"],"sourceRoot":""}