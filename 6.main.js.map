{"version":3,"sources":["webpack:///./src/components/GameOfLife/GameOfLife.styles.js","webpack:///./src/components/GameOfLife/GameOfLife.constants.js","webpack:///./src/components/GameOfLife/index.js","webpack:///./src/components/Link/Link.styles.js","webpack:///./src/components/Link/index.js","webpack:///./src/containers/Home/Home.styles.js","webpack:///./src/containers/Home/index.js"],"names":["Board","styled_components_browser_esm","div","_templateObject","Cell","_templateObject2","_ref","x","_ref2","y","CELL_SIZE","GameOfLife_GameOfLife","GameOfLife","props","_this","_classCallCheck","this","isRunning","_possibleConstructorReturn","_getPrototypeOf","call","state","cells","runIteration","react_default","a","Component","size","board","range_default","rows","forEach","cols","Math","random","_this2","get_default","push","neighbors","dy","dx","setState","_this3","interval","calculateNeighbours","livingCells","timeoutHandler","setTimeout","createElement","id","map","c","_extends","key","concat","domBoard","document","getElementById","clientHeight","clientWidth","_board","randomBoard","value","propTypes","prop_types_default","number","bool","defaultProps","components_GameOfLife","getBorderColor","borderColor","getBorderWidth","_ref3","borderWidth","getButtonWidth","_ref4","buttonWidth","getButtonHeight","_ref5","buttonHeight","lineBorderPsuedoElem","AnimatedBorderedLinkWrapper","span","Link_styles_templateObject","fontSize","_ref8","fontColors","initial","_ref6","active","_ref7","hover","Link_Link","href","children","linkProps","pick_default","borderStyleProps","Link","to","string","node","isRequired","shape","components_Link","FullPageGrid","Object","styled_css_grid_esm","Home_styles_templateObject","CenteredCell","Home_styles_templateObject2","__webpack_exports__","routed","routes","describe","columns","width","height","style","backgroundColor","Home_extends","labs","$"],"mappings":"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","file":"6.main.js","sourcesContent":["import styled from \"styled-components\";\n\nimport { CELL_SIZE, CELL_BORDER } from \"./GameOfLife.constants\";\n\nexport const Board = styled.div`\n    width: 100%;\n    height: 100%;\n    position: relative;\n    margin: 0 auto;\n    background-color: #000;\n    background-image: linear-gradient(\n            #333 ${CELL_BORDER}px,\n            transparent ${CELL_BORDER}px\n        ),\n        linear-gradient(\n            90deg,\n            #333 ${CELL_BORDER}px,\n            transparent ${CELL_BORDER}px\n        );\n    background-size: ${CELL_SIZE}px ${CELL_SIZE}px;\n    overflow: hidden;\n`;\n\nexport const Cell = styled.div`\n    position: absolute;\n    left: ${({ x }) => CELL_SIZE * x + CELL_BORDER}px;\n    top: ${({ y }) => CELL_SIZE * y + CELL_BORDER}px;\n    width: ${CELL_SIZE - CELL_BORDER * 2}px;\n    height: ${CELL_SIZE - CELL_BORDER * 2}px;\n    background-color: #fff;\n    border-radius: 100%;\n`;\n","export const BOARD_ID = \"game-of-life-board\";\nexport const CELL_SIZE = 20;\nexport const CELL_BORDER = 1;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport range from \"lodash/range\";\nimport get from \"lodash/get\";\n\nimport { BOARD_ID, CELL_SIZE } from \"./GameOfLife.constants\";\nimport { Board, Cell } from \"./GameOfLife.styles\";\n\nclass GameOfLife extends React.Component {\n    static propTypes = {\n        interval: PropTypes.number,\n        isRunning: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        interval: 100,\n        isRunning: true,\n    };\n\n    constructor(props) {\n        super(props);\n        const { isRunning } = this.props;\n        this.state = {\n            cells: [],\n            isRunning,\n        };\n        this.runIteration();\n    }\n\n    get size() {\n        const domBoard = document.getElementById(BOARD_ID);\n        if (!domBoard) {\n            return null;\n        }\n        return {\n            rows: domBoard.clientHeight / CELL_SIZE,\n            cols: domBoard.clientWidth / CELL_SIZE,\n        };\n    }\n\n    get board() {\n        if (!this._board) {\n            this._board = this.randomBoard();\n        }\n        return this._board;\n    }\n\n    set board(value) {\n        this._board = value;\n    }\n\n    randomBoard() {\n        const { size } = this;\n        if (!size) {\n            return null;\n        }\n        const board = [];\n        range(0, size.rows).forEach(y => {\n            board[y] = [];\n            range(0, size.cols).forEach(x => {\n                board[y][x] = Math.random() > 0.8;\n            });\n        });\n        return board;\n    }\n\n    livingCells() {\n        const cells = [];\n        const { size } = this;\n        range(0, size.rows).forEach(y => {\n            range(0, size.cols).forEach(x => {\n                if (get(this.board, [y, x], false)) {\n                    cells.push({ x, y });\n                }\n            });\n        });\n        return cells;\n    }\n\n    calculateNeighbours(x, y) {\n        let neighbors = 0;\n        const { board } = this;\n        range(-1, 2).forEach(dy => {\n            range(-1, 2).forEach(dx => {\n                if (\n                    !(dx === 0 && dy === 0) &&\n                    get(board, [y + dy, x + dx], false)\n                ) {\n                    neighbors += 1;\n                }\n            });\n        });\n        return neighbors;\n    }\n\n    startRunning() {\n        this.setState({ isRunning: true });\n        this.runIteration();\n    }\n\n    stopRunning() {\n        this.setState({ isRunning: false });\n    }\n\n    runIteration() {\n        const { isRunning } = this.state;\n        if (!isRunning) {\n            delete this.timeoutHandler;\n            return;\n        }\n        const {\n            size,\n            props: { interval },\n        } = this;\n        if (size) {\n            const board = [];\n            range(0, size.rows).forEach(y => {\n                board[y] = [];\n                range(0, size.cols).forEach(x => {\n                    const neighbors = this.calculateNeighbours(x, y);\n                    board[y][x] =\n                        neighbors === 3 ||\n                        (neighbors === 2 && get(this.board, [y, x], false));\n                });\n            });\n            this.board = board;\n            this.setState({ cells: this.livingCells() });\n        }\n        this.timeoutHandler = setTimeout(() => {\n            this.runIteration();\n        }, interval);\n    }\n\n    render() {\n        const { cells } = this.state;\n        return (\n            <Board id={BOARD_ID}>\n                {cells.map(c => <Cell key={`${c.x},${c.y}`} {...c} />)}\n            </Board>\n        );\n    }\n}\n\nexport default GameOfLife;\n","import styled from \"styled-components\";\n\nconst animTime = \"0.1s\";\nconst getFontSize = ({ fontSize }) => `${fontSize}pt`;\nconst getBorderColor = ({ borderColor }) => `${borderColor}`;\nconst getBorderWidth = ({ borderWidth }) => `${borderWidth}px`;\nconst getButtonWidth = ({ buttonWidth }) => `${buttonWidth}px`;\nconst getButtonHeight = ({ buttonHeight }) => `${buttonHeight}px`;\nconst getActiveColor = ({ fontColors: { active } }) => active;\nconst getHoverColor = ({ fontColors: { hover } }) => hover;\nconst getInitialColor = ({ fontColors: { initial } }) => initial;\n\nconst lineBorderPsuedoElem = props => `\n    content: \"\";\n    position: absolute;\n    transition: ease ${animTime} all;\n    width: ${getButtonWidth(props)};\n`;\n\nexport const AnimatedBorderedLinkWrapper = styled.span`\na {\n    text-transform: uppercase;\n    text-decoration: none;\n    font-size: ${getFontSize};\n\n    justify-content: center;\n    align-items: center;\n    display: inline-flex;\n    margin: calc(${getBorderWidth} * 2);\n    width: ${getButtonWidth};\n    height: ${getButtonHeight};\n    font-weight: bold;\n    color: ${getInitialColor};\n    margin: 0;\n    padding: 0;\n    position: relative;\n\n    background-repeat: no-repeat;\n    background-size: 50% ${getBorderWidth};\n    background-position: bottom;\n    background-image: linear-gradient(\n        90deg,\n        ${getBorderColor} 0%,\n        ${getBorderColor} 100%\n    );\n    transition: ${animTime} all ease;\n    transition-delay: calc(${animTime} * 2);\n    \n    &:active {\n        color: ${getActiveColor};\n        background-color: ${getBorderColor};\n    }\n\n    &:hover {\n        color: ${getHoverColor};\n        background-size: 100% ${getBorderWidth};\n        transition-delay: 0s;\n    }\n\n    /* side borders */\n    &::before {\n        ${lineBorderPsuedoElem}\n        transition-delay: ${animTime};\n        width: calc(${getButtonWidth} - ${getBorderWidth} * 2);\n        border-left: solid ${getBorderWidth} ${getBorderColor};\n        border-right: solid ${getBorderWidth} ${getBorderColor};\n        height: 0;\n        bottom: 0;\n    }\n\n    &:hover::before {\n        transition-delay: ${animTime};\n        height: ${getButtonHeight};\n    }\n\n    /* top border */\n    &::after {\n        ${lineBorderPsuedoElem}\n        transition-delay: 0s;\n        border-left: solid 0 ${getBorderColor};\n        border-right: solid 0 ${getBorderColor};\n        height: ${getBorderWidth};\n        top: 0;\n        left: 0;\n    }\n\n    &:hover::after {\n        transition-delay: calc(${animTime} * 2);\n        width: 0;\n        border-width: calc(${getButtonWidth} / 2);\n    }\n}\n`;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link as L } from \"react-router-dom\";\nimport pick from \"lodash/pick\";\n\nimport { AnimatedBorderedLinkWrapper } from \"./Link.styles\";\n\nfunction Link(props) {\n    const { href, children } = props;\n    const linkProps = pick(props, [\"children\", \"href\", \"to\"]);\n    const borderStyleProps = pick(props, [\n        \"borderColor\",\n        \"borderWidth\",\n        \"buttonWidth\",\n        \"buttonHeight\",\n        \"fontColors\",\n        \"fontSize\",\n    ]);\n    return (\n        <AnimatedBorderedLinkWrapper {...borderStyleProps}>\n            {href ? <a {...linkProps}>{children}</a> : <L {...linkProps} />}\n        </AnimatedBorderedLinkWrapper>\n    );\n}\n\nLink.propTypes = {\n    /** If specified react router Link is user */\n    to: PropTypes.string,\n    /** If specified native html a link is used */\n    href: PropTypes.string,\n    /** HTML element content */\n    children: PropTypes.node.isRequired,\n    /** CSS border color */\n    borderColor: PropTypes.string,\n    /** CSS border thickness */\n    borderWidth: PropTypes.number,\n    /** Link button width in px */\n    buttonWidth: PropTypes.number,\n    /** Link button height in px */\n    buttonHeight: PropTypes.number,\n    /** Link colors in various contexts */\n    fontColors: PropTypes.shape({\n        active: PropTypes.string,\n        hover: PropTypes.string,\n        initial: PropTypes.string,\n    }),\n    /** Link font size in pt */\n    fontSize: PropTypes.number,\n};\n\nLink.defaultProps = {\n    to: null,\n    href: null,\n    borderColor: \"black\",\n    borderWidth: 8,\n    buttonWidth: 128,\n    buttonHeight: 64,\n    fontColors: {\n        active: \"white\",\n        hover: \"#2386F1\",\n        initial: \"black\",\n    },\n    fontSize: 18,\n};\n\nexport default Link;\n","import styled from \"styled-components\";\nimport { Grid, Cell } from \"styled-css-grid\";\n\nexport const FullPageGrid = styled(Grid)`\n    height: 100%;\n    width: 100%;\n`;\n\nexport const CenteredCell = styled(Cell)`\n    display: flex;\n    text-align: center;\n    align-items: center;\n    justify-content: center;\n    justify-self: stretch;\n`;\n","import React from \"react\";\n\nimport GameOfLife from \"components/GameOfLife\";\nimport Link from \"components/Link\";\nimport appRoutes from \"containers/App/routes\";\nimport { FullPageGrid, CenteredCell } from \"./Home.styles\";\n\nexport default function() {\n    const routed = appRoutes.describe();\n    const linkProps = {\n        buttonWidth: 256,\n        buttonHeight: 80,\n        fontSize: 32,\n    };\n    return (\n        <FullPageGrid columns={3} rows={3}>\n            <CenteredCell\n                width={3}\n                height={2}\n                style={{ backgroundColor: \"black\" }}\n            >\n                <GameOfLife />\n            </CenteredCell>\n            <CenteredCell>\n                <Link\n                    {...linkProps}\n                    href=\"https://github.com/iamogbz/iamogbz.github.io\"\n                >\n                    Source\n                </Link>\n            </CenteredCell>\n            <CenteredCell>\n                <Link {...linkProps} to={routed.labs.$}>\n                    Labs\n                </Link>\n            </CenteredCell>\n            <CenteredCell>\n                <Link {...linkProps} href=\"http://emmanuel.ogbizi.com\">\n                    Profile\n                </Link>\n            </CenteredCell>\n        </FullPageGrid>\n    );\n}\n"],"sourceRoot":""}